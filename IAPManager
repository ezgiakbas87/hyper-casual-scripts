using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Purchasing;
using System;

public class IAPController : MonoBehaviour,IStoreListener
{
  public UIManager uimanager;
  public Sounds sounds;
  IStoreController controller;
  
  public string[] product;
  private IStoreListener _storeListenerImplementation;

  public void Start()
  {
    IAPStart();
  }

  public void IAPStart()
  {
    var module = StandardPurchasingModule.Instance();
    ConfigurationBuilder builder = ConfigurationBuilder.Instance(module);

    foreach (string item in product)
    {
      builder.AddProduct(item, ProductType.Consumable); //it will editing for IOS or Android market 
    }
    
    UnityPurchasing.Initialize(this,builder);
  }

  public void OnInitialized(IStoreController controller, IExtensionProvider extensions)
  {
    this.controller = controller;
  }

  public void OnInitializeFailed(InitializationFailureReason error)
  {
    Debug.Log("initialize failed");
  }

  public void OnInitializeFailed(InitializationFailureReason error, string message)
  {
    _storeListenerImplementation.OnInitializeFailed(error, message);
  }

  public void OnPurchaseFailed(Product product, PurchaseFailureReason failureReason)
  {
    Debug.Log("Failed initialize");
  }


  public PurchaseProcessingResult ProcessPurchase(PurchaseEventArgs e)
  {
    if (string.Equals(e.purchasedProduct.definition.id, product[0], StringComparison.Ordinal))
    {
      PlayerPrefs.SetInt("moneyy", PlayerPrefs.GetInt("moneyy") + 2500);
      uimanager.CoinTextUpdate();
      sounds.cashSound();
      return PurchaseProcessingResult.Complete;
    }
    if (string.Equals(e.purchasedProduct.definition.id, product[1], StringComparison.Ordinal))
    {
      PlayerPrefs.SetInt("moneyy", PlayerPrefs.GetInt("moneyy") + 5000);
      uimanager.CoinTextUpdate();
      sounds.cashSound();
      return PurchaseProcessingResult.Complete;

    }
    if (string.Equals(e.purchasedProduct.definition.id, product[2], StringComparison.Ordinal))
    {
      PlayerPrefs.SetInt("moneyy", PlayerPrefs.GetInt("moneyy") + 10000);
      uimanager.CoinTextUpdate();
      sounds.cashSound();
      return PurchaseProcessingResult.Complete;
    }
    if (string.Equals(e.purchasedProduct.definition.id, product[3], StringComparison.Ordinal))
    {
      if (PlayerPrefs.HasKey("Noads") == true)
      {
        PlayerPrefs.SetInt("Noads", 1);
        sounds.cashSound();
        uimanager.NoadsRemove();
       
      }
      return PurchaseProcessingResult.Complete;
    }

    else
    {
      return PurchaseProcessingResult.Pending;
    }
  }

  public void IAPButton(string id)
  {
    Product product = controller.products.WithID(id);
    if (product != null && product.availableToPurchase)
    {
      controller.InitiatePurchase(product);
      Debug.Log("buying");
    }
    else 
      Debug.Log("Not buying");
  }
}
